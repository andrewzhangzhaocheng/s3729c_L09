# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(tools)
library(shinythemes)
library(dplyr)
library(DT)


# Load data --------------------------------------------------------------------



Measurements <- read.csv(file = "https://raw.githubusercontent.com/andrewzhangzhaocheng/s3729c_L09/andrewmain/MentalHealthSurvey.csv", header = TRUE, sep = ",")



# Define UI --------------------------------------------------------------------



ui <- fluidPage(
  shinythemes::themeSelector(),
  navbarPage("mental health survey:",
             
             tabPanel("Home",
                      
  sidebarLayout(
    sidebarPanel(
      HTML("<h3>Input parameters</h3>"),
      selectInput(
        inputId = "x",
        label = "X-axis:",
        choices = c(
          "Person Indentifier" = "Person_Indentifier",
          "Gender" = "gender",
          "Age" = "age",
          "University" = "university",
          "Degree Level" = "degree_level",
          "Degree Major" = "degree_major",
          "Academic Year" = "academic_year",
          "Cgpa" = "cgpa",
          "Residential Status" = "residential_status",
          "Campus Discrimination" = "campus_discrimination",
          "Sports Engagement" = "sports_engagement",
          "Average Sleep" = "average_sleep",
          "Study Satisfaction" = "study_satisfaction",
          "Academic Workload " = "academic_workload ",
          "Academic Pressure" = "academic_pressure",
          "Financial Concerns" = "financial_concerns",
          "Social Relationships" = "social_relationships",
          "Depression" = "depression",
          "Anxiety" = "anxiety",
          "Isolation" = "isolation",
          "Future Insecurity" = "future_insecurity",
          "Stress Relief_Activities" = "stress_relief_activities"
        ),
        selected = "age"
      ),
      
      selectInput(
        inputId = "y",
        label = "Y-axis:",
        choices = c(
          "Person Indentifier" = "Person_Indentifier",
          "Gender" = "gender",
          "Age" = "age",
          "University" = "university",
          "Degree Level" = "degree_level",
          "Degree Major" = "degree_major",
          "Academic Year" = "academic_year",
          "Cgpa" = "cgpa",
          "Residential Status" = "residential_status",
          "Campus Discrimination" = "campus_discrimination",
          "Sports Engagement" = "sports_engagement",
          "Average Sleep" = "average_sleep",
          "Study Satisfaction" = "study_satisfaction",
          "Academic Workload " = "academic_workload ",
          "Academic Pressure" = "academic_pressure",
          "Financial Concerns" = "financial_concerns",
          "Social Relationships" = "social_relationships",
          "Depression" = "depression",
          "Anxiety" = "anxiety",
          "Isolation" = "isolation",
          "Future Insecurity" = "future_insecurity",
          "Stress Relief_Activities" = "stress_relief_activities"
          
        ),
        selected = "anxiety"
      ),
      
      
      
      selectInput(
        inputId = "z",
        label = "Color by:",
        choices = c(
          "Person Indentifier" = "Person_Indentifier",
          "Gender" = "gender",
          "Age" = "age",
          "University" = "university",
          "Degree Level" = "degree_level",
          "Degree Major" = "degree_major",
          "Academic Year" = "academic_year",
          "Cgpa" = "cgpa",
          "Residential Status" = "residential_status",
          "Campus Discrimination" = "campus_discrimination",
          "Sports Engagement" = "sports_engagement",
          "Average Sleep" = "average_sleep",
          "Study Satisfaction" = "study_satisfaction",
          "Academic Workload " = "academic_workload ",
          "Academic Pressure" = "academic_pressure",
          "Financial Concerns" = "financial_concerns",
          "Social Relationships" = "social_relationships",
          "Depression" = "depression",
          "Anxiety" = "anxiety",
          "Isolation" = "isolation",
          "Future Insecurity" = "future_insecurity",
          "Stress Relief_Activities" = "stress_relief_activities"
          
        ),
        selected = "academic_year"
      ),
      
      sliderInput(
        inputId = "alpha",
        label = "Alpha:",
        min = 0, max = 1,
        value = 0.5
      ),
      
      sliderInput(
        inputId = "size",
        label = "Size:",
        min = 0, max = 5,
        value = 2
      ),
      
      textInput(
        inputId = "plot_title",
        label = "Plot title",
        placeholder = "Enter text to be used as plot title"
      ),
      
      actionButton(
        inputId = "update_plot_title",
        label = "Update plot title"
      )
    ),
    
    mainPanel(
      plotOutput(outputId = "scatterplot", brush = brushOpts(id = "plot_brush")),
      DT::dataTableOutput(outputId = "measurementstable"),
      textOutput(outputId = "avg_x"), # avg of x
      textOutput(outputId = "avg_y"), # avg of y
      verbatimTextOutput(outputId = "lmoutput") # regression output
    )
  )
),
tabPanel("About", 
         titlePanel("About"),                                                           
         strong("Student Mental Health Survey"),
         p("Key aspects covered in the dataset include:"),
         p("Demographic details such as gender, age, and university."),
         p("Academic details like degree level, major, academic year, and current CGPA."),
         p("Student's residential status and experiences with discrimination, harassment, or bullying on campus."),
         p("Student's lifestyle factors include frequency of sports engagement and average sleep hours per night."),
         p("Student's satisfaction with their field of study and their perception of academic workload."),
         p("Addressing the academic pressure, financial concerns, and the quality of social relationships on campus."),
         strong("References"),                                    
         p("Frequency of experiencing depression, anxiety, feelings of isolation, and insecurity about the future."),
         p("Activities that students engage in to relieve stress.")
) #tabPanel(), About
)
)



# Define server ----------------------------------------------------------------



server <- function(input, output, session) {
  
  new_plot_title <- eventReactive(
    eventExpr = input$update_plot_title,
    valueExpr = {
      toTitleCase(input$plot_title)
    })
  
  output$scatterplot <- renderPlot({
    ggplot(data = Measurements, aes_string(x = input$x, y = input$y, color = input$z)) +
      geom_point(alpha = input$alpha, size = input$size) +
      labs(title = new_plot_title())
  })
  
  output$measurementstable <- renderDataTable({
    brushedPoints(Measurements, brush = input$plot_brush) %>%
      select(Person_Indentifier,gender,age,university,degree_level,degree_major,academic_year,cgpa,residential_status,campus_discrimination,sports_engagement,average_sleep,study_satisfaction,academic_workload,academic_pressure,financial_concerns,social_relationships,depression,anxiety,isolation,future_insecurity,stress_relief_activities)
  })
  
  output$avg_x <- renderText({
    avg_x <- Measurements %>% pull(input$x) %>% mean() %>% round(2)
    paste("Average", input$x, "=", avg_x)
  })
  
  output$avg_y <- renderText({
    avg_y <- Measurements %>% pull(input$y) %>% mean() %>% round(2)
    paste("Average", input$y, "=", avg_y)
  })
  
  output$lmoutput <- renderPrint({
    x <- Measurements %>% pull(input$x)
    y <- Measurements %>% pull(input$y)
    print(summary(lm(y ~ x, data = Measurements)), digits = 3, signif.stars = FALSE)
  })
  
}



# Create the Shiny app object --------------------------------------------------



shinyApp(ui = ui, server = server)

